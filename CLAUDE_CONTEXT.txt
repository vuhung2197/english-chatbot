T·ªïng h·ª£p Ki·∫øn tr√∫c v√† Code c·ªßa English Chatbot

  üèóÔ∏è Ki·∫øn tr√∫c T·ªïng quan

  Stack c√¥ng ngh·ªá:
  - Backend: Node.js + Express.js + MySQL
  - Frontend: React.js v·ªõi functional components + hooks
  - AI/ML: OpenAI GPT-4, Text Embedding (text-embedding-3-small)
  - Database: MySQL v·ªõi utf8mb4 charset

  M√¥ h√¨nh tri·ªÉn khai:
  - Monorepo v·ªõi 2 module ƒë·ªôc l·∫≠p (backend/frontend)
  - RESTful API architecture
  - Token-based authentication (JWT)

  üì¶ C√°c Module Ch√≠nh v√† Vai Tr√≤

  Backend Modules:

  1. Controllers (controllers/)
  - chatController.js: X·ª≠ l√Ω chat ch√≠nh v·ªõi 3 mode RAG (embedding/context/direct)        
  - authController.js: X√°c th·ª±c user (login/register)
  - knowledgeController.js: Qu·∫£n l√Ω knowledge base
  - uploadController.js: Upload v√† x·ª≠ l√Ω t√†i li·ªáu (PDF, DOC, TXT)

  2. Services (services/)
  - rag_retrieve.js: Truy xu·∫•t chunks theo cosine similarity
  - rag_cot.js: Chain-of-Thought reasoning v·ªõi GPT
  - embeddingVector.js: T·∫°o embedding vectors
  - scoreContext.js: Scoring d·ª±a tr√™n keyword matching

  3. Routes & Middleware (routes/, middlewares/)
  - REST API endpoints theo ch·ª©c nƒÉng
  - authMiddleware.js: JWT validation
  - errorHandler.js: Centralized error handling

  Frontend Modules:

  1. Core Components (src/component/)
  - Chat.js: Giao di·ªán chat ch√≠nh v·ªõi history v√† model selection
  - KnowledgeAdmin.js: Qu·∫£n tr·ªã knowledge base
  - Login.js/Register.js: Authentication UI
  - ModelManager.js: Qu·∫£n l√Ω AI models

  2. Utilities
  - DarkModeContext.js: Theme management
  - Local storage cho caching v√† history

  üîÑ Lu·ªìng X·ª≠ l√Ω D·ªØ li·ªáu Ch√≠nh (RAG Pipeline)

  1. Embedding Mode (RAG ch√≠nh th·ª©c)

  Question ‚Üí getEmbedding() ‚Üí retrieveTopChunks() ‚Üí askChatGPT() ‚Üí Response
  - Chuy·ªÉn c√¢u h·ªèi th√†nh vector embedding
  - T√¨m top 3 chunks c√≥ cosine similarity cao nh·∫•t
  - K·∫øt h·ª£p context v·ªõi GPT-4 ƒë·ªÉ sinh c√¢u tr·∫£ l·ªùi

  2. Context Mode (Keyword-based)

  Question ‚Üí selectRelevantContexts() ‚Üí scoreContext() ‚Üí askChatGPT() ‚Üí Response
  - Ph√¢n t√≠ch t·ª´ kh√≥a trong c√¢u h·ªèi
  - Scoring d·ª±a tr√™n keyword matching + important keywords
  - ∆Øu ti√™n title matches v√† sequence scoring

  3. Direct Mode

  Question ‚Üí askChatGPT() (v·ªõi history context) ‚Üí Response
  - Tr·∫£ l·ªùi tr·ª±c ti·∫øp kh√¥ng c·∫ßn RAG
  - S·ª≠ d·ª•ng l·ªãch s·ª≠ h·ªôi tho·∫°i l√†m context

  Data Flow Security:

  - Mask/unmask sensitive info (phone, email, address)
  - Caching mechanism v·ªõi SHA256 hash
  - User-specific history tracking

  üìù Quy t·∫Øc Code v√† Naming

  Backend Conventions:

  - File naming: camelCase (chatController.js, embeddingVector.js)
  - Function naming: camelCase v·ªõi verb prefix (getEmbedding,
  selectRelevantContexts)
  - Variable naming: camelCase
  - Constants: UPPER_SNAKE_CASE cho environment variables
  - Database: snake_case (user_questions, knowledge_chunks)

  Code Style Patterns:

  - ES6 modules (import/export)
  - Async/await pattern cho asynchronous operations
  - Destructuring assignment const { message, mode } = req.body
  - Template literals cho string formatting
  - Arrow functions cho callbacks
  - Try-catch error handling

  Frontend Conventions:

  - Components: PascalCase (Chat.js, ModelManager.js)
  - Hooks: useState, useEffect with descriptive names
  - Props: camelCase
  - CSS: Inline styles v·ªõi object notation
  - API calls: axios v·ªõi async/await

  Architecture Patterns:

  - Separation of concerns: Controllers ‚Üí Services ‚Üí Database
  - Single responsibility: M·ªói service file c√≥ 1 ch·ª©c nƒÉng ch√≠nh
  - Error boundary: Centralized error handling
  - State management: Local state + localStorage cho persistence

  Comments v√† Documentation:

  - JSDoc format cho function documentation
  - Vietnamese comments cho business logic
  - Emoji prefixes cho log messages (‚ùå, ‚úÖ, üìö, üß†)