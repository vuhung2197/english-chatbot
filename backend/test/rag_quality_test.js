import mysql from 'mysql2/promise';
import { retrieveTopChunks } from '../services/rag_retrieve.js';
import { getEmbedding } from '../services/embeddingVector.js';

// K·∫øt n·ªëi database
const pool = mysql.createPool({
  host: 'localhost',
  user: 'root',
  password: '123456',
  database: 'chatbot',
  port: 3307,
  charset: 'utf8mb4',
});

/**
 * Test ch·∫•t l∆∞·ª£ng RAG v·ªõi chunks c≈© vs m·ªõi
 */
async function testRAGQuality() {
  console.log('üß™ RAG QUALITY TEST: So s√°nh ch·∫•t l∆∞·ª£ng retrieval\n');

  try {
    // Test questions ƒë·ªÉ ƒë√°nh gi√° RAG
    const testQuestions = [
      "NLP l√† g√¨ v√† t·∫°i sao quan tr·ªçng?",
      "Chatbot c√≥ nh·ªØng ·ª©ng d·ª•ng g√¨ trong th·ª±c t·∫ø?",
      "Case study v·ªÅ Bank of America v√† chatbot Erica",
      "Th√°ch th·ª©c c·ªßa NLP trong vi·ªác hi·ªÉu ng√¥n ng·ªØ con ng∆∞·ªùi",
      "Xu h∆∞·ªõng ph√°t tri·ªÉn c·ªßa NLP trong t∆∞∆°ng lai"
    ];

    console.log('üìù Test Questions:');
    testQuestions.forEach((q, i) => {
      console.log(`   ${i + 1}. ${q}`);
    });
    console.log('');

    // L·∫•y chunks hi·ªán t·∫°i t·ª´ database
    console.log('1Ô∏è‚É£ L·∫•y chunks hi·ªán t·∫°i t·ª´ database...');
    const [chunks] = await pool.execute(`
      SELECT id, title, content, token_count, 
             CHAR_LENGTH(content) as char_length,
             CASE 
               WHEN content LIKE '%.' THEN 'Complete'
               WHEN content LIKE '%!' THEN 'Complete' 
               WHEN content LIKE '%?' THEN 'Complete'
               ELSE 'Incomplete'
             END as completeness
      FROM knowledge_chunks 
      ORDER BY id
    `);

    console.log(`üìä T·ªïng s·ªë chunks: ${chunks.length}`);
    console.log(`üìä Trung b√¨nh t·ª´/chunk: ${(chunks.reduce((sum, chunk) => sum + chunk.token_count, 0) / chunks.length).toFixed(1)}`);
    
    const completeChunks = chunks.filter(chunk => chunk.completeness === 'Complete').length;
    console.log(`üìä Chunks ho√†n ch·ªânh: ${completeChunks}/${chunks.length} (${(completeChunks/chunks.length*100).toFixed(1)}%)\n`);

    // Test retrieval cho t·ª´ng c√¢u h·ªèi
    console.log('2Ô∏è‚É£ TEST RETRIEVAL CHO T·ª™NG C√ÇU H·ªéI:');
    console.log('=' .repeat(80));

    for (let i = 0; i < testQuestions.length; i++) {
      const question = testQuestions[i];
      console.log(`\nüîç Question ${i + 1}: "${question}"`);
      
      try {
        // T·∫°o embedding cho c√¢u h·ªèi
        const questionEmbedding = await getEmbedding(question);
        
        // Retrieve top chunks
        const retrievedChunks = await retrieveTopChunks(questionEmbedding, 3, 0.5);
        
        console.log(`üìä Retrieved ${retrievedChunks.length} chunks:`);
        
        retrievedChunks.forEach((chunk, index) => {
          const relevance = chunk.similarity ? chunk.similarity.toFixed(3) : 'N/A';
          const wordCount = chunk.content ? chunk.content.split(/\s+/).length : 0;
          const isComplete = chunk.content && (chunk.content.endsWith('.') || chunk.content.endsWith('!') || chunk.content.endsWith('?'));
          
          console.log(`   ${index + 1}. Relevance: ${relevance}, Words: ${wordCount}, Complete: ${isComplete ? '‚úÖ' : '‚ùå'}`);
          console.log(`      "${chunk.content ? chunk.content.substring(0, 100) + '...' : 'No content'}"`);
        });

        // ƒê√°nh gi√° ch·∫•t l∆∞·ª£ng retrieval
        const avgRelevance = retrievedChunks.reduce((sum, chunk) => sum + (chunk.similarity || 0), 0) / retrievedChunks.length;
        const completeRetrieved = retrievedChunks.filter(chunk => 
          chunk.content && (chunk.content.endsWith('.') || chunk.content.endsWith('!') || chunk.content.endsWith('?'))
        ).length;
        
        console.log(`üìà Quality Metrics:`);
        console.log(`   - Average relevance: ${avgRelevance.toFixed(3)}`);
        console.log(`   - Complete chunks: ${completeRetrieved}/${retrievedChunks.length}`);
        console.log(`   - Quality score: ${((avgRelevance * 0.7) + (completeRetrieved/retrievedChunks.length * 0.3)).toFixed(3)}/1.0`);

      } catch (error) {
        console.log(`‚ùå Error retrieving for question ${i + 1}: ${error.message}`);
      }
    }

    // 3. Ph√¢n t√≠ch t·ªïng th·ªÉ
    console.log('\n3Ô∏è‚É£ PH√ÇN T√çCH T·ªîNG TH·ªÇ:');
    console.log('=' .repeat(80));
    
    // Th·ªëng k√™ chunks
    const stats = {
      totalChunks: chunks.length,
      avgWords: chunks.reduce((sum, chunk) => sum + chunk.token_count, 0) / chunks.length,
      completeChunks: completeChunks,
      completenessRate: completeChunks / chunks.length,
      avgCharLength: chunks.reduce((sum, chunk) => sum + chunk.char_length, 0) / chunks.length
    };

    console.log('üìä Chunk Statistics:');
    console.log(`   - Total chunks: ${stats.totalChunks}`);
    console.log(`   - Average words: ${stats.avgWords.toFixed(1)}`);
    console.log(`   - Average characters: ${stats.avgCharLength.toFixed(1)}`);
    console.log(`   - Completeness rate: ${(stats.completenessRate * 100).toFixed(1)}%`);

    // ƒê√°nh gi√° ch·∫•t l∆∞·ª£ng
    let qualityScore = 0;
    let qualityFactors = [];

    // Factor 1: Completeness (30%)
    if (stats.completenessRate >= 0.9) {
      qualityScore += 0.3;
      qualityFactors.push('‚úÖ High completeness (90%+)');
    } else if (stats.completenessRate >= 0.7) {
      qualityScore += 0.2;
      qualityFactors.push('‚ö†Ô∏è Medium completeness (70-90%)');
    } else {
      qualityScore += 0.1;
      qualityFactors.push('‚ùå Low completeness (<70%)');
    }

    // Factor 2: Optimal chunk size (25%)
    if (stats.avgWords >= 80 && stats.avgWords <= 200) {
      qualityScore += 0.25;
      qualityFactors.push('‚úÖ Optimal chunk size (80-200 words)');
    } else if (stats.avgWords >= 50 && stats.avgWords <= 300) {
      qualityScore += 0.15;
      qualityFactors.push('‚ö†Ô∏è Acceptable chunk size (50-300 words)');
    } else {
      qualityScore += 0.05;
      qualityFactors.push('‚ùå Poor chunk size (<50 or >300 words)');
    }

    // Factor 3: Chunk count (25%)
    if (stats.totalChunks >= 2 && stats.totalChunks <= 5) {
      qualityScore += 0.25;
      qualityFactors.push('‚úÖ Optimal chunk count (2-5)');
    } else if (stats.totalChunks >= 1 && stats.totalChunks <= 10) {
      qualityScore += 0.15;
      qualityFactors.push('‚ö†Ô∏è Acceptable chunk count (1-10)');
    } else {
      qualityScore += 0.05;
      qualityFactors.push('‚ùå Poor chunk count (<1 or >10)');
    }

    // Factor 4: Content richness (20%)
    if (stats.avgCharLength >= 500) {
      qualityScore += 0.2;
      qualityFactors.push('‚úÖ Rich content (500+ chars)');
    } else if (stats.avgCharLength >= 200) {
      qualityScore += 0.1;
      qualityFactors.push('‚ö†Ô∏è Moderate content (200-500 chars)');
    } else {
      qualityScore += 0.05;
      qualityFactors.push('‚ùå Poor content (<200 chars)');
    }

    console.log('\nüìà Quality Assessment:');
    qualityFactors.forEach(factor => console.log(`   ${factor}`));
    console.log(`\nüéØ Overall Quality Score: ${(qualityScore * 100).toFixed(1)}/100`);

    if (qualityScore >= 0.8) {
      console.log('üèÜ EXCELLENT: RAG system is highly optimized!');
    } else if (qualityScore >= 0.6) {
      console.log('‚úÖ GOOD: RAG system is well optimized');
    } else if (qualityScore >= 0.4) {
      console.log('‚ö†Ô∏è FAIR: RAG system needs improvement');
    } else {
      console.log('‚ùå POOR: RAG system needs major optimization');
    }

    console.log('\nüöÄ RECOMMENDATIONS:');
    if (stats.completenessRate < 0.9) {
      console.log('   - Improve chunk completeness (avoid cutting mid-sentence)');
    }
    if (stats.avgWords < 80 || stats.avgWords > 200) {
      console.log('   - Optimize chunk size for better context');
    }
    if (stats.totalChunks < 2 || stats.totalChunks > 5) {
      console.log('   - Adjust chunk count for optimal retrieval');
    }
    if (stats.avgCharLength < 500) {
      console.log('   - Increase content richness per chunk');
    }

  } catch (error) {
    console.error('‚ùå Error in RAG quality test:', error);
  } finally {
    await pool.end();
    console.log('\nüîå Database connection closed');
  }
}

// Ch·∫°y test
testRAGQuality()
  .then(() => {
    console.log('\n‚úÖ RAG Quality Test completed!');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\nüí• RAG Quality Test failed:', error);
    process.exit(1);
  });
