import pool from "../db.js";
import { normalizeText } from "./textUtils.js";

/**
 * H·ªá th·ªëng t·ª± ƒë·ªông ch·ªçn thu·∫≠t to√°n x·ª≠ l√Ω c√¢u h·ªèi
 * - Ph√¢n t√≠ch c√¢u h·ªèi ƒë·ªÉ x√°c ƒë·ªãnh lo·∫°i v√† n·ªôi dung
 * - T·ª± ƒë·ªông ch·ªçn thu·∫≠t to√°n ph√π h·ª£p: RAG+chunk, score context, ho·∫∑c direct mode
 */

/**
 * Ki·ªÉm tra xem c√¢u h·ªèi c√≥ li√™n quan ƒë·∫øn ki·∫øn th·ª©c ƒë√£ h·ªçc tr∆∞·ªõc ƒë√≥ kh√¥ng
 * @param {string} question - C√¢u h·ªèi ng∆∞·ªùi d√πng
 * @returns {Promise<Object>} - K·∫øt qu·∫£ ph√¢n t√≠ch v·ªõi ƒëi·ªÉm s·ªë v√† t·ª´ kh√≥a
 */
async function analyzeQuestionRelevance(question) {
  try {
    // L·∫•y danh s√°ch t·ª´ kh√≥a quan tr·ªçng
    const [kwRows] = await pool.execute("SELECT keyword FROM important_keywords");
    const importantKeywords = kwRows.map(r => r.keyword.toLowerCase());
    
    // L·∫•y m·∫´u ti√™u ƒë·ªÅ ki·∫øn th·ª©c ƒë·ªÉ ph√¢n t√≠ch
    const [titleRows] = await pool.execute("SELECT DISTINCT title FROM knowledge_base LIMIT 100");
    const knowledgeTitles = titleRows.map(r => r.title.toLowerCase());
    
    const normalizedQuestion = normalizeText(question);
    const questionWords = normalizedQuestion.split(' ').filter(w => w.length > 2);
    
    // T√≠nh ƒëi·ªÉm li√™n quan ƒë·∫øn ki·∫øn th·ª©c ƒë√£ c√≥
    let relevanceScore = 0;
    let matchedKeywords = [];
    let matchedTopics = [];
    
    // Ki·ªÉm tra t·ª´ kh√≥a quan tr·ªçng
    importantKeywords.forEach(keyword => {
      if (normalizedQuestion.includes(keyword.toLowerCase())) {
        relevanceScore += 3;
        matchedKeywords.push(keyword);
      }
    });
    
    // Ki·ªÉm tra ti√™u ƒë·ªÅ ch·ªß ƒë·ªÅ
    knowledgeTitles.forEach(title => {
      const titleWords = title.split(' ').filter(w => w.length > 2);
      const commonWords = titleWords.filter(word => 
        questionWords.some(qw => qw.includes(word) || word.includes(qw))
      );
      
      if (commonWords.length > 0) {
        relevanceScore += commonWords.length * 2;
        matchedTopics.push(title);
      }
    });
    
    // Ki·ªÉm tra ƒë·ªô t∆∞∆°ng ƒë·ªìng t·ª´ v·ª±ng chung
    const vocabularyScore = questionWords.filter(word => 
      importantKeywords.some(kw => kw.includes(word) || word.includes(kw))
    ).length;
    
    relevanceScore += vocabularyScore;
    
    return {
      relevanceScore,
      matchedKeywords,
      matchedTopics,
      questionLength: question.length,
      questionWords: questionWords.length,
      isKnowledgeRelated: relevanceScore > 2
    };
  } catch (error) {
    console.error("‚ùå L·ªói ph√¢n t√≠ch c√¢u h·ªèi:", error);
    return {
      relevanceScore: 0,
      matchedKeywords: [],
      matchedTopics: [],
      questionLength: question.length,
      questionWords: 0,
      isKnowledgeRelated: false
    };
  }
}

/**
 * Ph√¢n lo·∫°i lo·∫°i c√¢u h·ªèi d·ª±a tr√™n n·ªôi dung v√† c·∫•u tr√∫c
 * @param {string} question - C√¢u h·ªèi ng∆∞·ªùi d√πng
 * @returns {Object} - Th√¥ng tin ph√¢n lo·∫°i c√¢u h·ªèi
 */
function categorizeQuestion(question) {
  const normalizedQ = question.toLowerCase().trim();
  
  // C√°c pattern ƒë·ªÉ nh·∫≠n di·ªán lo·∫°i c√¢u h·ªèi
  const patterns = {
    definition: /^(.*)(l√† g√¨|what is|nghƒ©a l√† g√¨|ƒë·ªãnh nghƒ©a|kh√°i ni·ªám)/,
    explanation: /^(t·∫°i sao|why|l√†m th·∫ø n√†o|how|gi·∫£i th√≠ch|explain)/,
    comparison: /^(so s√°nh|kh√°c nhau|gi·ªëng|compare|difference)/,
    procedure: /^(c√°ch l√†m|how to|l√†m sao|quy tr√¨nh|steps)/,
    factual: /^(khi n√†o|when|·ªü ƒë√¢u|where|ai|who|bao nhi√™u|how many|how much)/,
    conversational: /^(ch√†o|hello|hi|c·∫£m ∆°n|thank|xin l·ªói|sorry|t·∫°m bi·ªát|goodbye)/,
    general: /^(b·∫°n|you|ai|what|g√¨|sao|th·∫ø n√†o)/
  };
  
  let questionType = 'general';
  let confidence = 0.5;
  
  // X√°c ƒë·ªãnh lo·∫°i c√¢u h·ªèi
  for (const [type, pattern] of Object.entries(patterns)) {
    if (pattern.test(normalizedQ)) {
      questionType = type;
      confidence = 0.8;
      break;
    }
  }
  
  // ƒê√°nh gi√° ƒë·ªô ph·ª©c t·∫°p
  const complexity = question.length > 50 ? 'complex' : 
                    question.length > 20 ? 'medium' : 'simple';
  
  return {
    type: questionType,
    complexity,
    confidence,
    isConversational: questionType === 'conversational',
    needsContext: ['definition', 'explanation', 'comparison', 'procedure'].includes(questionType)
  };
}

/**
 * Ch·ªçn thu·∫≠t to√°n x·ª≠ l√Ω ph√π h·ª£p nh·∫•t cho c√¢u h·ªèi
 * @param {string} question - C√¢u h·ªèi ng∆∞·ªùi d√πng
 * @param {number} userId - ID ng∆∞·ªùi d√πng (optional)
 * @returns {Promise<Object>} - Thu·∫≠t to√°n ƒë∆∞·ª£c ch·ªçn v√† th√¥ng tin ph√¢n t√≠ch
 */
export async function selectAlgorithm(question, userId = null) {
  try {
    // Ph√¢n t√≠ch m·ª©c ƒë·ªô li√™n quan ƒë·∫øn ki·∫øn th·ª©c
    const relevanceAnalysis = await analyzeQuestionRelevance(question);
    
    // Ph√¢n lo·∫°i c√¢u h·ªèi
    const questionCategory = categorizeQuestion(question);
    
    // Logic ch·ªçn thu·∫≠t to√°n
    let selectedAlgorithm = 'direct';
    let confidence = 0.5;
    let reason = 'M·∫∑c ƒë·ªãnh';
    
    // N·∫øu c√¢u h·ªèi c√≥ t√≠nh ch·∫•t tr√≤ chuy·ªán ho·∫∑c ch√†o h·ªèi ƒë∆°n gi·∫£n
    if (questionCategory.isConversational) {
      selectedAlgorithm = 'direct';
      confidence = 0.9;
      reason = 'C√¢u h·ªèi tr√≤ chuy·ªán, s·ª≠ d·ª•ng direct mode';
    }
    // N·∫øu c√¢u h·ªèi c√≥ li√™n quan cao ƒë·∫øn ki·∫øn th·ª©c ƒë√£ h·ªçc
    else if (relevanceAnalysis.isKnowledgeRelated && relevanceAnalysis.relevanceScore > 5) {
      // Ch·ªçn gi·ªØa RAG v√† score context
      if (relevanceAnalysis.matchedKeywords.length > 2 || questionCategory.needsContext) {
        // Nhi·ªÅu t·ª´ kh√≥a tr√πng kh·ªõp -> d√πng score context
        selectedAlgorithm = 'context';
        confidence = 0.85;
        reason = `T√¨m th·∫•y ${relevanceAnalysis.matchedKeywords.length} t·ª´ kh√≥a quan tr·ªçng, d√πng score context`;
      } else {
        // √çt t·ª´ kh√≥a nh∆∞ng c√≥ li√™n quan -> d√πng RAG embedding
        selectedAlgorithm = 'embedding';
        confidence = 0.8;
        reason = 'C√¢u h·ªèi li√™n quan ƒë·∫øn ki·∫øn th·ª©c, d√πng RAG embedding';
      }
    }
    // N·∫øu c√¢u h·ªèi c√≥ m·ªôt s·ªë li√™n quan nh∆∞ng kh√¥ng cao
    else if (relevanceAnalysis.isKnowledgeRelated && relevanceAnalysis.relevanceScore > 2) {
      selectedAlgorithm = 'embedding';
      confidence = 0.7;
      reason = 'C√¢u h·ªèi c√≥ th·ªÉ li√™n quan ƒë·∫øn ki·∫øn th·ª©c, th·ª≠ RAG embedding';
    }
    // C√¢u h·ªèi kh√¥ng li√™n quan ƒë·∫øn ki·∫øn th·ª©c ƒë√£ h·ªçc
    else {
      selectedAlgorithm = 'direct';
      confidence = 0.8;
      reason = 'C√¢u h·ªèi kh√¥ng li√™n quan ƒë·∫øn ki·∫øn th·ª©c ƒë√£ h·ªçc, d√πng direct mode';
    }
    
    // Ghi log quy·∫øt ƒë·ªãnh ƒë·ªÉ ph√¢n t√≠ch v√† c·∫£i thi·ªán
    console.log(`ü§ñ Algorithm Selection:`, {
      question: question.substring(0, 100) + '...',
      selected: selectedAlgorithm,
      confidence,
      reason,
      relevanceScore: relevanceAnalysis.relevanceScore,
      questionType: questionCategory.type,
      matchedKeywords: relevanceAnalysis.matchedKeywords.length
    });
    
    return {
      algorithm: selectedAlgorithm,
      confidence,
      reason,
      analysis: {
        relevance: relevanceAnalysis,
        category: questionCategory
      }
    };
    
  } catch (error) {
    console.error("‚ùå L·ªói ch·ªçn thu·∫≠t to√°n:", error);
    return {
      algorithm: 'direct',
      confidence: 0.5,
      reason: 'L·ªói ph√¢n t√≠ch, s·ª≠ d·ª•ng direct mode m·∫∑c ƒë·ªãnh',
      analysis: null
    };
  }
}

/**
 * L∆∞u th·ªëng k√™ v·ªÅ vi·ªác ch·ªçn thu·∫≠t to√°n ƒë·ªÉ c·∫£i thi·ªán h·ªá th·ªëng
 * @param {string} question - C√¢u h·ªèi
 * @param {string} selectedAlgorithm - Thu·∫≠t to√°n ƒë∆∞·ª£c ch·ªçn  
 * @param {number} confidence - ƒê·ªô tin c·∫≠y
 * @param {Object} analysis - K·∫øt qu·∫£ ph√¢n t√≠ch
 * @param {number} userId - ID ng∆∞·ªùi d√πng
 */
export async function logAlgorithmSelection(question, selectedAlgorithm, confidence, analysis, userId = null) {
  try {
    await pool.execute(`
      INSERT INTO algorithm_selections 
      (user_id, question, selected_algorithm, confidence, relevance_score, matched_keywords, question_type, created_at) 
      VALUES (?, ?, ?, ?, ?, ?, ?, NOW())
    `, [
      userId,
      question,
      selectedAlgorithm,
      confidence,
      analysis?.relevance?.relevanceScore || 0,
      JSON.stringify(analysis?.relevance?.matchedKeywords || []),
      analysis?.category?.type || 'unknown'
    ]);
  } catch (error) {
    console.warn("‚ö†Ô∏è Kh√¥ng th·ªÉ l∆∞u log algorithm selection:", error.message);
  }
}