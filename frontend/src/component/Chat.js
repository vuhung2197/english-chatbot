import React, { useState, useEffect } from 'react';
import HelpGuide from "./HelpGuide";
import ChatInputSuggest from "./ChatInputSuggest";
import CryptoJS from "crypto-js";

const API_URL = process.env.REACT_APP_API_URL;

export default function Chat() {
  const [input, setInput] = useState("");
  const [history, setHistory] = useState([]);
  const [showGuide, setShowGuide] = useState(true);
  const [loading, setLoading] = useState(false);
  const [mode, setMode] = useState("embedding");

  const algorithmDescriptions = {
    embedding: "üìö RAG + Chunk: Thu·∫≠t to√°n k·∫øt h·ª£p truy xu·∫•t ng·ªØ nghƒ©a (RAG) v√† chia ƒëo·∫°n nh·ªè (chunking) gi√∫p chuy·ªÉn c√¢u h·ªèi th√†nh vector embedding r·ªìi t√¨m ki·∫øm ch√≠nh x√°c ƒëo·∫°n ki·∫øn th·ª©c ph√π h·ª£p. Cho ph√©p x·ª≠ l√Ω c√¢u h·ªèi kh√≥, kh√¥ng c·∫ßn tr√πng t·ª´ kh√≥a.",
    context: "üß† Score Context: So s√°nh t·ª´ kh√≥a gi·ªØa c√¢u h·ªèi v√† n·ªôi dung ki·∫øn th·ª©c b·∫±ng c√°ch ƒë·∫øm s·ªë t·ª´ kh·ªõp, ∆∞u ti√™n c·ª•m t·ª´ quan tr·ªçng, ƒë·ªô t∆∞∆°ng ƒë·ªìng v√† ph·∫°t ƒë·ªô d√†i. Hi·ªáu qu·∫£ khi n·ªôi dung v√† c√¢u h·ªèi c√≥ t·ª´ ng·ªØ g·∫ßn nhau."
  };

  useEffect(() => {
    const saved = localStorage.getItem("chatbot_history");
    if (saved) {
      try {
        setHistory(JSON.parse(saved));
      } catch (e) {
        console.error("L·ªói khi parse history t·ª´ localStorage:", e);
      }
    }
  }, []);

  useEffect(() => {
    localStorage.setItem("chatbot_history", JSON.stringify(history));
  }, [history]);

  const hashQuestion = (text) => {
    return CryptoJS.SHA256(text.trim().toLowerCase()).toString();
  };

  async function sendChat() {
    if (!input.trim() || loading) return;
    setLoading(true);
    const timestamp = new Date().toISOString();
    const hash = hashQuestion(input);

    // Ki·ªÉm tra cache
    const cached = JSON.parse(localStorage.getItem("chatbot_cache") || "{}");
    if (cached[hash]) {
      setHistory([{ user: input, bot: cached[hash], createdAt: timestamp }, ...history]);
      setInput("");
      setLoading(false);
      return;
    }

    try {
      const res = await fetch(`${API_URL}/chat`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ message: input, mode })
      });
      const data = await res.json();
      setHistory([{ user: input, bot: data.reply, createdAt: timestamp }, ...history]);

      const isNoAnswer = [
        "Xin l·ªói, t√¥i ch∆∞a c√≥ ki·∫øn th·ª©c ph√π h·ª£p ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y.",
        "Kh√¥ng th·ªÉ t√≠nh embedding c√¢u h·ªèi!",
        "Bot ƒëang b·∫≠n, vui l√≤ng th·ª≠ l·∫°i sau!",
        "T√¥i ch∆∞a c√≥ ki·∫øn th·ª©c ph√π h·ª£p ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y."
      ].includes(data.reply);

      if (!isNoAnswer) {
        cached[hash] = data.reply;
        localStorage.setItem("chatbot_cache", JSON.stringify(cached));
      }

      setInput("");
    } catch (err) {
      setHistory([{ user: input, bot: "L·ªói khi g·ª≠i c√¢u h·ªèi!", createdAt: timestamp }, ...history]);
      setInput("");
    }
    setLoading(false);
  }

  return (
    <div style={{
      background: "rgba(255,255,255,0.92)",
      borderRadius: "2em",
      padding: "2em 2.5em",
      maxWidth: 480,
      boxShadow: "0 8px 32px 0 rgba(31,38,135,0.18)",
      border: "1px solid #bcbcbc",
      margin: "0 auto"
    }}>
      <button onClick={() => setShowGuide(v => !v)}>
        {showGuide ? "·∫®n h∆∞·ªõng d·∫´n" : "Hi·ªán h∆∞·ªõng d·∫´n"}
      </button>
      {showGuide && <HelpGuide />}

      <button
        onClick={() => {
          if (window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a to√†n b·ªô l·ªãch s·ª≠ kh√¥ng?")) {
            setHistory([]);
            localStorage.removeItem("chatbot_history");
            localStorage.removeItem("chatbot_cache");
          }
        }}
        style={{
          marginTop: 8,
          marginBottom: 12,
          backgroundColor: "#f44336",
          color: "white",
          border: "none",
          borderRadius: "6px",
          padding: "6px 12px",
          cursor: "pointer"
        }}
      >
        üóë X√≥a to√†n b·ªô l·ªãch s·ª≠
      </button>

      <label style={{ marginTop: 16, display: "block", fontWeight: "bold", color: "#000" }}>
        Ch·ªçn thu·∫≠t to√°n:
      </label>
      <select value={mode} onChange={e => setMode(e.target.value)} style={{ marginBottom: 8 }}>
        <option value="embedding">üìö RAG + Chunk</option>
        <option value="context">üß† Score context</option>
      </select>
      <div style={{ fontSize: "0.95em", color: "#666", marginBottom: 16 }}>
        {algorithmDescriptions[mode]}
      </div>

      <div style={{ display: "flex", gap: 8, marginBottom: "1.5em" }}>
        <ChatInputSuggest
          value={input}
          onChange={setInput}
          onSend={sendChat}
          disabled={loading}
        />
      </div>

      <div style={{
        maxHeight: 260,
        overflowY: "auto",
        display: "flex",
        flexDirection: "column-reverse",
        gap: "1em"
      }}>
        {loading && (
          <div style={{
            textAlign: "left",
            color: "#999",
            fontStyle: "italic",
            margin: "0.5em 0 0.5em 10px"
          }}>
            <b>Bot:</b> <span>ƒêang tr·∫£ l·ªùi...</span>
          </div>
        )}
        {history.map((item, idx) => {
          const time = new Date(item.createdAt).toLocaleString("vi-VN");

          return (
            <div key={idx}>
              <div style={{
                background: "#e4e7ff", color: "#35477d",
                alignSelf: "flex-end", marginLeft: "auto",
                padding: "8px 12px", borderRadius: "1em",
                marginBottom: 4, display: "inline-block", maxWidth: "85%"
              }}>
                <b>B·∫°n:</b> {item.user}
                <div style={{ fontSize: "0.8em", color: "#999", marginTop: 4 }}>{time}</div>
              </div>
              <div style={{
                background: "#e2fcfa", color: "#24637c",
                alignSelf: "flex-start", marginRight: "auto",
                padding: "8px 12px", borderRadius: "1em",
                marginBottom: 4, display: "inline-block", maxWidth: "85%",
                whiteSpace: "normal", fontSize: "1.06em"
              }}>
                <b>Bot:</b>
                <div style={{ marginTop: 4 }} dangerouslySetInnerHTML={{ __html: item.bot }} />
                <div style={{ fontSize: "0.8em", color: "#999", marginTop: 4 }}>{time}</div>
              </div>
            </div>
          );
        })}
      </div>
    </div>
  );
}
