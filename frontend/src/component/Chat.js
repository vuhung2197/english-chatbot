import React, { useState, useEffect } from 'react';
import HelpGuide from "./HelpGuide";
import ChatInputSuggest from "./ChatInputSuggest";
import CryptoJS from "crypto-js";
import ReactMarkdown from 'react-markdown';

const API_URL = process.env.REACT_APP_API_URL;

export default function Chat() {
  const [input, setInput] = useState("");
  const [history, setHistory] = useState([]);
  const [showGuide, setShowGuide] = useState(true);
  const [loading, setLoading] = useState(false);
  const [mode, setMode] = useState("embedding");
  const [questionHistory, setQuestionHistory] = useState([]);
  const [showRecentModal, setShowRecentModal] = useState(false);

  const algorithmDescriptions = {
    embedding: "üìö RAG + Chunk: Thu·∫≠t to√°n k·∫øt h·ª£p truy xu·∫•t ng·ªØ nghƒ©a (RAG) v√† chia ƒëo·∫°n nh·ªè (chunking) gi√∫p chuy·ªÉn c√¢u h·ªèi th√†nh vector embedding r·ªìi t√¨m ki·∫øm ch√≠nh x√°c ƒëo·∫°n ki·∫øn th·ª©c ph√π h·ª£p. Cho ph√©p x·ª≠ l√Ω c√¢u h·ªèi kh√≥, kh√¥ng c·∫ßn tr√πng t·ª´ kh√≥a.",
    context: "üß† Score Context: So s√°nh t·ª´ kh√≥a gi·ªØa c√¢u h·ªèi v√† n·ªôi dung ki·∫øn th·ª©c b·∫±ng c√°ch ƒë·∫øm s·ªë t·ª´ kh·ªõp, ∆∞u ti√™n c·ª•m t·ª´ quan tr·ªçng, ƒë·ªô t∆∞∆°ng ƒë·ªìng v√† ph·∫°t ƒë·ªô d√†i. Hi·ªáu qu·∫£ khi n·ªôi dung v√† c√¢u h·ªèi c√≥ t·ª´ ng·ªØ g·∫ßn nhau."
  };

  useEffect(() => {
    const userId = localStorage.getItem("userId");
    const saved = localStorage.getItem(`chatbot_history_${userId}`);
    if (saved) {
      try {
        setHistory(JSON.parse(saved));
      } catch (e) {
        console.error("L·ªói khi parse history:", e);
      }
    }
  }, []);

  useEffect(() => {
    const userId = localStorage.getItem("userId");
    localStorage.setItem(`chatbot_history_${userId}`, JSON.stringify(history));
  }, [history]);

  useEffect(() => {
    async function fetchHistory() {
      try {
        const res = await fetch(`${API_URL}/chat/history`, {
          headers: {
            Authorization: `Bearer ${localStorage.getItem("token")}`
          }
        });
        const data = await res.json();
        setQuestionHistory(data);
      } catch (err) {
        console.error("L·ªói khi l·∫•y l·ªãch s·ª≠ c√¢u h·ªèi:", err);
      }
    }

    fetchHistory();
  }, []);

  const hashQuestion = (text) => {
    return CryptoJS.SHA256(text.trim().toLowerCase()).toString();
  };

  async function sendChat() {
    if (!input.trim() || loading) return;
    setLoading(true);
    const timestamp = new Date().toISOString();
    const hash = hashQuestion(input);
    const cached = JSON.parse(localStorage.getItem("chatbot_cache") || "{}");

    if (cached[hash]) {
      setHistory([{ user: input, bot: cached[hash], createdAt: timestamp }, ...history]);
      setInput("");
      setLoading(false);
      return;
    }

    const token = localStorage.getItem("token");

    try {
      const res = await fetch(`${API_URL}/chat`, {
        method: "POST",
        headers: { "Content-Type": "application/json", Authorization: `Bearer ${token}` },
        body: JSON.stringify({ message: input, mode })
      });
      const data = await res.json();
      setHistory([{ user: input, bot: data.reply, createdAt: timestamp }, ...history]);

      const isNoAnswer = [
        "Xin l·ªói, t√¥i ch∆∞a c√≥ ki·∫øn th·ª©c ph√π h·ª£p ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y.",
        "Kh√¥ng th·ªÉ t√≠nh embedding c√¢u h·ªèi!",
        "Bot ƒëang b·∫≠n, vui l√≤ng th·ª≠ l·∫°i sau!",
        "T√¥i ch∆∞a c√≥ ki·∫øn th·ª©c ph√π h·ª£p ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y."
      ].includes(data.reply);

      if (!isNoAnswer) {
        cached[hash] = data.reply;
        localStorage.setItem("chatbot_cache", JSON.stringify(cached));
      }

      setInput("");
    } catch (err) {
      setHistory([{ user: input, bot: "L·ªói khi g·ª≠i c√¢u h·ªèi!", createdAt: timestamp }, ...history]);
      setInput("");
    }
    setLoading(false);
  }

  return (
    <div style={{
      background: "rgba(255,255,255,0.92)",
      borderRadius: "2em",
      padding: "2em 2.5em",
      maxWidth: 620,
      boxShadow: "0 8px 32px 0 rgba(31,38,135,0.18)",
      border: "1px solid #bcbcbc",
      margin: "0 auto"
    }}>
      <button onClick={() => setShowGuide(v => !v)}>
        {showGuide ? "·∫®n h∆∞·ªõng d·∫´n" : "Hi·ªán h∆∞·ªõng d·∫´n"}
      </button>
      {showGuide && <HelpGuide />}

      {questionHistory.length > 0 && (
        <button
          style={{
            marginTop: 16,
            marginBottom: 16,
            backgroundColor: "#2563eb",
            color: "white",
            padding: "8px 16px",
            border: "none",
            borderRadius: "8px",
            cursor: "pointer"
          }}
          onClick={() => setShowRecentModal(true)}
        >
          üïò Xem c√¢u h·ªèi g·∫ßn ƒë√¢y
        </button>
      )}

      {showRecentModal && (
        <div style={{
          position: "fixed", top: 0, left: 0, width: "100%", height: "100%",
          backgroundColor: "rgba(0,0,0,0.4)", zIndex: 999, display: "flex", alignItems: "center", justifyContent: "center"
        }}>
          <div style={{
            backgroundColor: "#fff", width: "90%", maxWidth: 800,
            maxHeight: "80%", overflowY: "auto",
            borderRadius: 12, padding: "24px 32px", position: "relative",
            boxShadow: "0 12px 32px rgba(0,0,0,0.25)"
          }}>
            <h2 style={{ marginTop: 0, color: "#222", marginBottom: 16 }}>üïò C√¢u h·ªèi & tr·∫£ l·ªùi g·∫ßn ƒë√¢y</h2>

            <button
              onClick={() => setShowRecentModal(false)}
              style={{
                position: "absolute", top: 16, right: 20,
                background: "#ef4444", color: "#fff", border: "none",
                borderRadius: 6, padding: "6px 12px", cursor: "pointer"
              }}
            >
              ƒê√≥ng
            </button>

            <div style={{ display: "flex", flexDirection: "column", gap: 16 }}>
              {questionHistory.map((item, index) => (
                <div key={index} style={{
                  background: "#f9fafb", borderRadius: 10, padding: "16px 20px",
                  border: "1px solid #e5e7eb", boxShadow: "0 1px 3px rgba(0,0,0,0.06)"
                }}>
                  <div style={{ marginBottom: 8 }}>
                    <span style={{ color: "#6b7280", fontSize: "0.85em" }}>
                      üóì {new Date(item.created_at).toLocaleString("vi-VN")}
                    </span>
                  </div>

                  <div style={{
                    background: "#eef2ff", padding: "10px 14px",
                    borderRadius: 8, color: "#1e3a8a", fontSize: "1em",
                    marginBottom: 10
                  }}>
                    <b>B·∫°n:</b> {item.question}
                  </div>

                  <div style={{
                    background: "#ecfdf5", padding: "10px 14px",
                    borderRadius: 8, color: "#065f46", fontSize: "1em",
                    whiteSpace: "pre-wrap"
                  }}>
                    <b>Bot:</b>
                    <div style={{ marginTop: 6 }}>
                      <ReactMarkdown>{item.bot_reply}</ReactMarkdown>
                    </div>
                  </div>

                  <button
                    onClick={() => {
                      setInput(item.question);
                      setShowRecentModal(false);
                    }}
                    style={{
                      marginTop: 12, background: "#3b82f6", color: "#fff",
                      border: "none", padding: "6px 12px", borderRadius: 6,
                      cursor: "pointer", fontSize: "0.95em"
                    }}
                  >
                    üîÅ G·ª≠i l·∫°i c√¢u h·ªèi n√†y
                  </button>

                  <button
                    onClick={async () => {
                      if (!window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a c√¢u h·ªèi n√†y?")) return;
                      try {
                        const res = await fetch(`${API_URL}/chat/history/${item.id}`, {
                          method: "DELETE",
                          headers: {
                            Authorization: `Bearer ${localStorage.getItem("token")}`
                          }
                        });
                        if (res.ok) {
                          setQuestionHistory(prev => prev.filter(q => q.id !== item.id));
                        } else {
                          alert("X√≥a th·∫•t b·∫°i!");
                        }
                      } catch (err) {
                        console.error("L·ªói khi x√≥a c√¢u h·ªèi:", err);
                        alert("ƒê√£ x·∫£y ra l·ªói khi x√≥a!");
                      }
                    }}
                    style={{
                      background: "#ef4444", color: "#fff",
                      border: "none", padding: "6px 12px", borderRadius: 6,
                      cursor: "pointer", fontSize: "0.95em"
                    }}
                  >
                    üóë X√≥a
                  </button>
                </div>
              ))}
            </div>
          </div>
        </div>
      )}


      {history.length > 0 && (
        <button
          onClick={() => {
            if (window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a to√†n b·ªô l·ªãch s·ª≠ kh√¥ng?")) {
              setHistory([]);
              localStorage.removeItem("chatbot_history");
              localStorage.removeItem("chatbot_cache");
            }
          }}
          style={{
            marginBottom: 12,
            backgroundColor: "#f44336",
            color: "white",
            border: "none",
            borderRadius: "6px",
            padding: "6px 12px",
            cursor: "pointer"
          }}
        >
          üóë X√≥a to√†n b·ªô l·ªãch s·ª≠
        </button>
      )}

      <label style={{ marginTop: 16, display: "block", fontWeight: "bold", color: "#000" }}>
        Ch·ªçn thu·∫≠t to√°n:
      </label>
      <select value={mode} onChange={e => setMode(e.target.value)} style={{ marginBottom: 8 }}>
        <option value="embedding">üìö RAG + Chunk</option>
        <option value="context">üß† Score context</option>
      </select>
      <div style={{ fontSize: "0.95em", color: "#666", marginBottom: 16 }}>
        {algorithmDescriptions[mode]}
      </div>

      <div style={{ display: "flex", gap: 8, marginBottom: "1.5em" }}>
        <ChatInputSuggest
          value={input}
          onChange={setInput}
          onSend={sendChat}
          disabled={loading}
        />
      </div>

      <div style={{
        maxHeight: 340,
        overflowY: "auto",
        display: "flex",
        flexDirection: "column-reverse",
        gap: "1em"
      }}>
        {loading && (
          <div style={{
            textAlign: "left",
            color: "#999",
            fontStyle: "italic",
            margin: "0.5em 0 0.5em 10px"
          }}>
            <b>Bot:</b> <span>ƒêang tr·∫£ l·ªùi...</span>
          </div>
        )}
        {history.map((item, idx) => {
          const time = new Date(item.createdAt).toLocaleString("vi-VN");
          return (
            <div key={idx}>
              <div style={{
                background: "#e4e7ff", color: "#35477d",
                alignSelf: "flex-end", marginLeft: "auto",
                padding: "8px 12px", borderRadius: "1em",
                marginBottom: 4, display: "inline-block", maxWidth: "85%"
              }}>
                <b>B·∫°n:</b> {item.user}
                <div style={{ fontSize: "0.8em", color: "#999", marginTop: 4 }}>{time}</div>
              </div>
              <div style={{
                background: "#e2fcfa", color: "#24637c",
                alignSelf: "flex-start", marginRight: "auto",
                padding: "8px 12px", borderRadius: "1em",
                marginBottom: 4, display: "inline-block", maxWidth: "85%",
                whiteSpace: "normal", fontSize: "1.06em"
              }}>
                <b>Bot:</b>
                <div style={{ marginTop: 4 }}>
                  <ReactMarkdown>{item.bot}</ReactMarkdown>
                </div>
                <div style={{ fontSize: "0.8em", color: "#999", marginTop: 4 }}>{time}</div>
              </div>
            </div>
          );
        })}
      </div>
    </div>
  );
}